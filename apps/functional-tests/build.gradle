plugins {
	id "groovy"
	id "com.energizedwork.webdriver-binaries" version "1.4"
}

ext {
	// todo add IE
	drivers = ["remoteEdge", "remoteFirefox", "remoteChrome", "chrome"]

	ext {
		groovyVersion = '2.5.8'
		gebVersion = '3.0.1'
		seleniumVersion = '3.141.59'
		spockCoreVersion = '1.3-groovy-2.5'
		slf4jApiVersion = '1.7.25'
	}
}

// todo verify this needed
drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver

        // todo remove this if we aren't using env files
        /*
         * Set environment variables from a .env file, if it exists.
         * Equals sign separated key value pairs, one per new line: SOME_KEY=some value
         * These local environment variables take precedence over any environment variables set at the system level.
         */
        def envFile = file('.env')
        if (envFile.exists()) {
            envFile.readLines().each() {
                def (key, value) = it.tokenize('=')
                if (key && value) {
                    environment key, value
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:$spockCoreVersion") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'


    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    //Support
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

    // if you don't already have slf4j-api and an implementation of it in the classpath, add this!
    testCompile "org.slf4j:slf4j-api:$slf4jApiVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jApiVersion"
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

sourceSets {
    test {
        groovy {
            srcDirs = ["src/test/groovy"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}
