// todo double check sonarqube config, see devops tools for sonarqube setup 
// https://github.com/bcgov/nr-showcase-devops-tools/tree/master/tools
// (bcgovimages/sonarqube:6.7.5) use image, don't need to build
// todo setup sonarqube server in our tools namespace
// change the password immediately, store in secrets


def sonarqubePodLabel = "eagle-api-${UUID.randomUUID().toString()}"
// todo get this from templates folder?
podTemplate(label: sonarqubePodLabel, name: sonarqubePodLabel, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-python3nodejs',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '1Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}',
    envVars: [
      envVar(key: 'SONARQUBE_URL', value: 'https://sonarqube-eagle-tools.pathfinder.gov.bc.ca')
    ]
  )
])

@NonCPS
import groovy.json.JsonOutput
/*
 * Sends a rocket chat notification
 */
def notifyRocketChat(text, url) {
    def rocketChatURL = url
    def payload = JsonOutput.toJson([
      "username":"Jenkins",
      "icon_url":"https://wiki.jenkins.io/download/attachments/2916393/headshot.png",
      "text": text
    ])

    sh("curl -X POST -H 'Content-Type: application/json' --data \'${payload}\' ${rocketChatURL}")
}

/*
 * Updates the global pastBuilds array: it will iterate recursively
 * and add all the builds prior to the current one that had a result
 * different than 'SUCCESS'.
 */
def buildsSinceLastSuccess(previousBuild, build) {
  if ((build != null) && (build.result != 'SUCCESS')) {
    pastBuilds.add(build)
    buildsSinceLastSuccess(pastBuilds, build.getPreviousBuild())
  }
}

/*
 * Generates a string containing all the commit messages from
 * the builds in pastBuilds.
 */
@NonCPS
def getChangeLog(pastBuilds) {
  def log = ""
  for (int x = 0; x < pastBuilds.size(); x++) {
    for (int i = 0; i < pastBuilds[x].changeSets.size(); i++) {
      def entries = pastBuilds[x].changeSets[i].items
      for (int j = 0; j < entries.length; j++) {
        def entry = entries[j]
        log += "* ${entry.msg} by ${entry.author} \n"
      }
    }
  }
  return log;
}

def CHANGELOG = "No new changes"
def IMAGE_HASH = "latest"

pipeline {
  agent none
  environment {
    ROCKET_QA_WEBHOOK = credentials('rocket-qa-webhook') // todo not sure jenkins credentials here will get the openshift secrets, may need to keep as script step
    ROCKET_DEPLOY_WEBHOOK = credentials('rocket-deploy-webhook')
  }
  options {
    disableResume()
    parrallelsAlwaysFailFast() // todo confirm use, from nr showcase devops tools demo
  }
  stages {
    stage('Build') {
      agent { label 'build' }
      steps {
        script {
          pastBuilds = []
          buildsSinceLastSuccess(pastBuilds, currentBuild);
          CHANGELOG = getChangeLog(pastBuilds);

          echo ">>>>>>Changelog: \n ${CHANGELOG}"

          try {
            // todo update cfg name and image tag, should be eagle-api?
            echo "Building eagle-api develop branch"
            openshiftBuild bldCfg: 'eagle-api', showBuildLogs: 'true'

            echo "Build done"

            echo ">>> Get Image Hash"
            // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
            // Tag the images for deployment based on the image's hash
            IMAGE_HASH = sh (
              script: """oc get istag eagle-api:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
              returnStdout: true).trim()
            echo ">> IMAGE_HASH: ${IMAGE_HASH}"
          } catch (error) {
            notifyRocketChat(
              "The latest build of eagle-api seems to be broken. \n Error: \n ${error}",
              ROCKET_QA_WEBHOOK
            )
            throw error
          }
        }
      }
    }

    stage('Unit Tests') {
      agent { label 'unit-tests' }
      steps {
        script {
          echo "Running unit-tests"
        }
      }
    }
    // todo need this?
    stage('checkout code') {
      checkout scm
    }
    stage('exeucte sonar') {
      agent { label 'sonarqubePodLabel' }
      steps {
        dir('sonar-runner') {
          try {
            sh './gradlew sonarqube -Dsonar.host.url=https://sonarqube-eagle-tools.pathfinder.gov.bc.ca -Dsonar.verbose=true --stacktrace --info'
          } finally {
            echo "Scane complete"
          }
        }
      }
    }
    stage('Deploy to Test'){
      steps {
        script {
          try {
            // todo update stream, cfg names
            echo "Deploying to test..."
            openshiftTag destStream: 'eagle-api', verbose: 'false', destTag: 'test', srcStream: 'eagle-api', srcTag: "${IMAGE_HASH}"
            sleep 5
            // todo eagle-test? what depCfg?
            openshiftVerifyDeployment depCfg: 'eagle-test', namespace: 'eagle-test', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false', waitTime: 600000
            echo ">>>> Deployment Complete"

            notifyRocketChat(
              "A new version of eagle-api is now in Test. \n Changes: \n ${CHANGELOG}",
              ROCKET_DEPLOY_WEBHOOK
            )

            notifyRocketChat(
              "A new version of eagle-api is now in Test and ready for QA. \n Changes to test: \n ${CHANGELOG}",
              ROCKET_QA_WEBHOOK
            )
          } catch (error) {
            notifyRocketChat(
              "The latest deployment of eagle-api to Test seems to have failed\n'${error.message}'",
              ROCKET_DEPLOY_WEBHOOK
            )
            error('Deploy failed')
          }
        }
      }
    }
  }
}

def zapPodLabel = "esm-server-owasp-zap-${UUID.randomUUID().toString()}"
podTemplate(label: zapPodLabel, name: zapPodLabel, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '3Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/home/jenkins',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
])
{
  stage('ZAP Security Scan') {
    node(zapPodLabel) {
      //the checkout is mandatory
      echo "checking out source"
      echo "Build: ${BUILD_ID}"
      checkout scm
      dir('zap') {
        def retVal = sh returnStatus: true, script: './runzap.sh'
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
        echo "Return value is: ${retVal}"
      }
    }
  }
}
